#!/usr/bin/env node
var Q = require('q');
var fs = require('fs');
var colors = require('colors');
var exec = require('child_process').exec;
var spawn = require('child_process').spawn;
var argv = require('minimist')(process.argv.slice(2));
var path = require('path');

var findup = require('findup-sync');

var available_colors = [
  'yellow',
  'cyan',
  'white',
  'magenta',
  'grey',
  'blue'
];

var env = ( typeof argv.env === 'string' ) ? path.resolve(argv.env) : findup('.env');
var childProcesses = ( typeof argv.config === 'string' ) ? path.resolve(argv.config) : findup('entry.json')

console.log('\nenv:\t%s\nconfig:\t%s\n', env, childProcesses);
 
if ( !childProcesses ) {
  console.log('Unable to find local entry.json\n');
  process.exit(99);
}

childProcesses = require(childProcesses);

var completed = [];

setEnv()
.then(spawnProcesses)
.then(pipeStdIn)
.fail(function( err ) {
  console.log('somehting wrong:', err);
});
 
function setEnv() {
  var deferred = Q.defer();

  if (!env) {
    deferred.resolve();
  } else {
    exec('source ' + env + ' && printenv', { cwd: env.replace(/\/.*/, '') }, function( err, stdout, stderr ) {
      if ( err ) {
        throw new Error(err);
      }

      stdout.split('\n').forEach(function( line ) {
        var parts = line.split('=');
        process.env[ parts[0] ] = parts[1];
      });

      deferred.resolve();
    });
  }

  return deferred.promise;
}

function spawnProcess(cp, i) {
  cp.process = spawn(cp.spawn.command, cp.spawn.args);
  
  [ 'stdout', 'stderr' ].forEach(function( str ) {
    cp.process[ str ].on('data', function( data ) {
      process[ str ].write(
          data.toString('utf8')
          .replace(/(^|\n)([^\n]+)/g, function( match, group1, group2 ) {
            return group1 + ( cp.handle + ': ' )[available_colors[i % available_colors.length]] + group2;
          }));
    })
    .on('close', function ( code, signal ) {
      if (completed.indexOf(cp.handle) < 0) {
        completed.push(cp.handle);
        process[ 'stdout' ].write(('------------------\n')[available_colors[i % available_colors.length]]);
        process[ 'stdout' ].write(
          ( cp.handle + ': completed\n' )[available_colors[i % available_colors.length]]
        );
        process[ 'stdout' ].write(('------------------\n')[available_colors[i % available_colors.length]]);

        childProcesses.forEach(function( cp2, i2 ) {
          if (cp2.hasOwnProperty('waitOn') && cp2.waitOn === cp.handle) {
            spawnProcess(cp2, i2);
          }
        });
      }
    });
  });
}

function spawnProcesses() {
  // generic stdout & stderr
  childProcesses.forEach(function( cp, i ) {
    if (!cp.hasOwnProperty('waitOn')) {
      spawnProcess(cp, i);
    }
  });
}

function pipeStdIn() {
  process.stdin.resume();
  process.stdin.on('data', function( chunk ) {
    var s = chunk.toString('utf8');
    var cp = childProcesses.filter(function( cp ) {
      return typeof cp.stdinPrefix === 'string' && ( new RegExp('^' + cp.stdinPrefix + '\\.') ).test(s);
    })[ 0 ];
   
    if ( !cp ) {
      return console.log(('No target for input').red);
    }
   
    var cmd = s.substring(cp.stdinPrefix.length + 1);
    cp.process.stdin.write(cmd);
  });
}
